{"version":3,"sources":["components/header.js","components/footer.js","sortingAlgos/mergeSort.js","sortingAlgos/quickSort.js","sortingAlgos/insertionSort.js","description/desc_sorting.js","components/sortingInterface.js","components/main.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","style","fontFamily","fontStyle","fontSize","color","Footer","rel","href","target","class","mergeSortHelper","arr","left","right","indexValuePairs","mid","Math","floor","merge","leftPart","slice","rightPart","i","j","k","length","push","quickSortHelper","tmp_arr","swap_triplets","isRandom","random_idx","random","swap","pivot","a","b","tmp","desc_mergeSort","desc_quickSort","desc_randomQuickSort","desc_insertSort","desc_reset","SortInterface","state","isBusy","timePerBar","barColor","min_val","max_val","len","bgColor0","bgColor1","new_arr","this","setState","result","mergeSort","bars","document","getElementsByClassName","map","pair","index","setTimeout","backgroundColor","height","isRandomized","currentBar","randomizedQuickSort","quickSort","triplet","height0","triplets","insertionSort","tmp_height","tmp_bgColor","resetArray","bar_seq","value","idx","width","marginLeft","marginTop","id","effect","border","delayShow","time","renderBars","Button","disabled","onClick","handleMergeSort","handleQuickSort","handleInsertionSort","html","Slider","defaultValue","min","max","valueLabelDisplay","onChange","event","onSpeedChange","onBarCountChange","Component","Main","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a19e2723.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <div className='tc grow pa2 ba bg-dark-gray dib bw2 shadow-5' style={{fontFamily: \"jasmine\", fontStyle: \"bold\", fontSize: \"7em\"}}>\r\n      <h3 style={{color:\"silver\"}}> Sorting Visualizer </h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport 'tachyons';\r\n\r\n\r\nfunction Footer(props) {\r\n    return(\r\n    <div className=\"footer ma0\">  \r\n            <div className=\"row justify-content-center bg-light-silver\">             \r\n                <div className=\"col-12 col-sm-3 col-md-2 align-self-center\" style={{color: \"black\"}}>\r\n                    <div className=\"ma3\" style={{fontFamily: \"jasmine\", fontStyle: \"bold\", fontSize: \"7em\"}}>\r\n                        <h5>Sorting Visualizer</h5>\r\n                    </div>\r\n                    <div style={{fontStyle: \"italic\"}}>\r\n\t\t              Abdur Rakib<br />\r\n\t\t              B.E. in Information Technology'23<br/>\r\n                      Jadavpur University<br />\r\n                      <p className=\"footer__text\">\r\n                        © 2022 - developed by\r\n                        <a rel=\"noreferrer\" href=\"https://github.com/Rakib12345678/\" target=\"_blank\">Abdur Rakib</a>\r\n                      </p>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* this div is for contact info-> mail, linkedin, github */}\r\n                <div className=\"col-12 col-sm-3 col-md-2 mt-3 align-self-center\">\r\n                    <div>\r\n                        <a className=\"btn btn-social-icon btn-linkedin\" href=\"https://www.linkedin.com/in/abdur-rakib-094888193/\"><i className=\"fa fa-linkedin\"></i></a>{' '}\r\n                        <br /> <br /> <a className=\"btn btn-social-icon\" href=\"mailto:abdurrakib9089@gmail.com\"><i className=\"fa fa-envelope-o\"></i></a>\r\n                        <br /> <br /> <a className=\"btn btn-social-icon\" rel=\"noreferrer\" href=\"https://github.com/Rakib12345678/\" target=\"_blank\"> <i class=\"fa fa-github\"></i></a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer;","/*IDEA: Here we apply the same logic that we generally do for merge sort.\r\n-> One thing that we add is the 'indexValuePairs' where we store each index and corresponding value of that index\r\n-> The value is bsically the 'final value' of the current state for that particular index (NOTE: The value may get modified later in the next steps)\r\n-> Finally we return an object containing 'final array' and 'indexValuePairs'\r\n*/\r\n\r\nexport const mergeSort = (arr) => {\r\n    const tmp = arr.slice();\r\n    const indexValuePairs = [];\r\n\r\n    mergeSortHelper(tmp, 0, tmp.length, indexValuePairs);\r\n\r\n    return {\r\n        indexValuePairs: indexValuePairs,\r\n        arr: tmp\r\n    };\r\n}\r\n\r\n\r\nconst mergeSortHelper = (arr, left, right, indexValuePairs) => {\r\n    if (left >= right)\r\n        return;\r\n\r\n    const mid = left + Math.floor((right - left) / 2);\r\n\r\n    mergeSortHelper(arr, left, mid, indexValuePairs);\r\n    mergeSortHelper(arr, mid + 1, right, indexValuePairs);\r\n\r\n\r\n    merge(arr, left, mid, right, indexValuePairs);\r\n}\r\n\r\nconst merge = (arr, left, mid, right, indexValuePairs) => {\r\n    const leftPart = arr.slice(left, mid + 1);\r\n    const rightPart = arr.slice(mid + 1, right + 1);\r\n\r\n    let i = 0, j = 0, k = left;\r\n\r\n    while (i < leftPart.length && j < rightPart.length) {\r\n        if (leftPart[i] <= rightPart[j]) arr[k] = leftPart[i++];\r\n        else arr[k] = rightPart[j++];\r\n\r\n        indexValuePairs.push([k, arr[k]]);  // current index and final value at this index (final value for the current step)\r\n        k++;\r\n    }\r\n\r\n    while (i < leftPart.length) {\r\n        arr[k] = leftPart[i++];\r\n        indexValuePairs.push([k, arr[k]]);\r\n        k++;\r\n    }\r\n\r\n    while (j < rightPart.length) {\r\n        arr[k] = rightPart[j++];\r\n        indexValuePairs.push([k, arr[k]]);\r\n        k++;\r\n    }\r\n}\r\n\r\n","export const quickSort = (arr) => {\r\n    const tmp_arr = arr.slice();\r\n    const swap_triplets = [];\r\n\r\n    quickSortHelper(tmp_arr, 0, tmp_arr.length - 1, swap_triplets, false);\r\n\r\n    return {\r\n        swap_triplets: swap_triplets,\r\n        arr: tmp_arr\r\n    };\r\n}\r\n\r\nexport const randomizedQuickSort = (arr) => {\r\n\r\n    const tmp_arr = arr.slice();\r\n    const swap_triplets = [];\r\n\r\n    quickSortHelper(tmp_arr, 0, tmp_arr.length - 1, swap_triplets, true);\r\n\r\n    return {\r\n        swap_triplets: swap_triplets,\r\n        arr: tmp_arr\r\n    };\r\n}\r\n\r\n\r\nconst quickSortHelper = (tmp_arr, left, right, swap_triplets, isRandom) => {\r\n\r\n    if (left > right) return;\r\n\r\n    if (isRandom) {\r\n        const random_idx = left + Math.floor((right - left) * Math.random());\r\n        swap(tmp_arr, left, random_idx);\r\n        swap_triplets.push([left, random_idx, false]);\r\n    }\r\n\r\n    // take the leftmost element as pivot and find its actual position and put the pivot there -> in case of 'randomized' we already stored 'random-idx' in 'left' \r\n    const pivot = tmp_arr[left];\r\n\r\n    let i = left; // last index having value <= pivot\r\n    let j = left + 1; //first index to examine\r\n\r\n    while (j <= right) {\r\n        if (tmp_arr[j] <= pivot) {\r\n            swap(tmp_arr, i + 1, j);\r\n            swap_triplets.push([i + 1, j, false]);\r\n            i++;\r\n        }\r\n        j++;\r\n    }\r\n\r\n    swap(tmp_arr, left, i);\r\n    swap_triplets.push([left, i, true]); // pivot swapped to final position i-> so we mark it as true -> that implies it's a pivot element and it is in its final position\r\n\r\n    quickSortHelper(tmp_arr, left, i - 1, swap_triplets, isRandom);\r\n    quickSortHelper(tmp_arr, i + 1, right, swap_triplets, isRandom);\r\n}\r\n\r\nconst swap = (arr, a, b) => {\r\n    const tmp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = tmp;\r\n}\r\n\r\n","\r\nexport const insertionSort = (arr) => {\r\n\r\n    const tmp_arr = arr.slice();\r\n    const triplets = [];\r\n    triplets.push([0,0,true]); //color 0th bar to 'purple' as there's no element on the left\r\n\r\n    for(let i=1; i<tmp_arr.length; i++){\r\n        let j = i;\r\n        if(tmp_arr[j-1] <= tmp_arr[j]){ \r\n            triplets.push([j, j, true]); // when the current element is greater than the previous we mark it as 'true' -> we just color it with 'purple' \r\n            continue;\r\n        }\r\n\r\n        while(j-1 >= 0 && tmp_arr[j-1] > tmp_arr[j]){\r\n            swap(tmp_arr, j-1, j);\r\n            triplets.push([j-1, j, false]); // when the current element is smaller than the previous mark it as 'false' -> swap color and height of both the bars (j-1 th and jth) \r\n            j--;\r\n        }\r\n        triplets.push([j, j, true]);  // got the final position for now (not the actual final position)\r\n    }\r\n    return {triplets: triplets, arr: tmp_arr};\r\n}\r\n\r\nconst swap = (arr, a, b) => {\r\n    const tmp = arr[a];\r\n    arr[a] = arr[b];\r\n    arr[b] = tmp;\r\n} ","export const desc_mergeSort = \"Applies MERGE SORT on the array! <br /> It requires O(N) additional SPACE to attain O(NlogN) TIME COMPLEXITY. <br /> WHAT YOU WILL SEE HERE? Values from additional array are written to the original array. <br /> So, Whenever a bar height is overridden, it will be highlighted!\";\r\n\r\nexport const desc_quickSort = \"Applies QUICK SORT on the array! <br /> NOTE: Here we choose the first element of subarray as the PIVOT <br /> WHAT YOU WILL SEE HERE? Two elements being swapped will be highlighted. <br /> In each iteration, after the current pivot is placed at its correct position - it will be highlighted!\";\r\n\r\nexport const desc_randomQuickSort = \"Applies RANDOMIZED QUICK SORT on the array! <br /> Overcomes the DRAWBACK of GENERAL QUICK SORY by choosing the pivot element RANDOMLY. <br /> WHAT YOU WILL SEE HERE? Two elements being swapped will be highlighted.<br /> In each iteration, after the current pivot is placed at its correct position - will be highlighted!\";\r\n\r\nexport const desc_insertSort = \"Applies INSERTION SORT on the array! <br /> Maintains the first portion of array (highlighted) sorted by searching for the correct position of each element INDIVIDUALLY! <br /> WHAT YOU WILL SEE HERE? How each element gets its perfect position that is shown here!\";\r\n\r\nexport const desc_reset = \"Resets the array elements by taking random values from a predifined range! <br /> Does NOT change array size (number of bars)!\";","import { React, Component } from 'react';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport { Button } from 'reactstrap';\r\nimport { mergeSort } from '../sortingAlgos/mergeSort';\r\nimport { quickSort, randomizedQuickSort } from '../sortingAlgos/quickSort';\r\nimport { insertionSort } from '../sortingAlgos/insertionSort';\r\nimport ReactTooltip from \"react-tooltip\";\r\nimport \"tachyons\";\r\nimport './sortingInterface.css'; \r\n\r\nimport {desc_reset, desc_mergeSort, desc_quickSort, desc_randomQuickSort, desc_insertSort } from '../description/desc_sorting';\r\n\r\nclass SortInterface extends Component { \r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            arr: [],\r\n            isBusy: false,  // it tells us whether any of the sorting algos are running or not\r\n            timePerBar: 50,\r\n            barColor: \"Black\",\r\n            min_val: 10,\r\n            max_val: 500,\r\n            len: 100,\r\n            bgColor0: \"purple\",  // the starting color of the bar diagram \r\n            bgColor1: \"Aqua\",   // the ending color of the bar diagram\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /* RESET ARRAY: Creates a new array of size 'len' with random values for the given range\r\n    -> At the end we update the state\r\n    */\r\n    resetArray() {\r\n        const new_arr = [];\r\n\r\n        const min_val = this.state.min_val;\r\n        const max_val = this.state.max_val;\r\n        const len = this.state.len;\r\n\r\n        for (var i = 0; i < len; i++) {\r\n            new_arr.push(min_val + Math.floor(Math.random() * (max_val - min_val)));  //random values are stored in the array that fall in the range (1-500)  -> Math.random() generates a value from 0.0 to 1.0\r\n        }\r\n\r\n        this.setState({\r\n            arr: new_arr,  // finally we modify the state with the newly generated array\r\n        }); \r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    /* MERGE SORT: First we perform normal merge sort, that retuns a final sorted array, and an array of 'index-value' pairs\r\n\r\n    -> The 'index-value' pairs store all the indices with their modified value for a particular round, that means- \r\n       for a single index, the number of times its value gets updated we store all the records, so that instead of showing the final \r\n       array directly we can display it round by round -> one index will appear more than once with different value\r\n    -> We use two different colors - 'yellow' for denoting the current bar, and 'purple' for bars 'processed atleast once'. That's why we \r\n       don't change the BG color when we are at the first index as nothing is processed before it.\r\n    -> The moment we are in the last index, we update the state and set the color of all the bar to 'black'\r\n    -> The setTimeout() method executes a block of code after the specified time -> index * this.state.timePerBar\r\n\r\n    HOW IS THE ANIMATION HANDLED?\r\n    While performing the normal merge-sort, we store all the indices along with their modified value of that round, and using that we \r\n    can highlight the current bar we are working on, and also modify its value with its 'final value so far'. \r\n\r\n    NOTE: Use console.log(indexValuePair) to see what it contains basically\r\n    */\r\n    handleMergeSort() {\r\n\r\n        const currentBar = \"yellow\";\r\n        const processedBars = \"#620037\";\r\n\r\n        this.setState({\r\n            isBusy: true\r\n        });\r\n\r\n        const result = mergeSort(this.state.arr);\r\n        const indexValuePairs = result.indexValuePairs;\r\n        const tmp_arr = result.arr;\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        // console.log(indexValuePairs);\r\n\r\n        indexValuePairs.map((pair, index) => {\r\n            setTimeout(   \r\n                () => { \r\n                    if(index > 0){\r\n                        bars[indexValuePairs[index-1][0]].style.backgroundColor = processedBars;\r\n                    } \r\n\r\n                    // change the height of the current bar (pair[0] index) by the value of pair[1] and also change the color to 'yellow'-> that tells in which bar we are working currently \r\n                    bars[pair[0]].style.height = `${pair[1]}px`;  \r\n                    bars[pair[0]].style.backgroundColor = currentBar; \r\n\r\n                    if (index === indexValuePairs.length - 1) {\r\n                        this.setState({\r\n                            arr: tmp_arr,\r\n                            isBusy: false,\r\n                        });\r\n\r\n                        for (let bar of bars) {\r\n                            bar.style.backgroundColor = this.state.barColor;\r\n                        }\r\n                    }\r\n\r\n                }, index * this.state.timePerBar);\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /*QUICK SORT: Here first we perform quick-sort, that returns a triplet that contains - two indices whose values are swapped at \r\n    a time (as we know we do swapping when we get a smaller value than pivot) and a bool value that tells whether a it was a pivot element or not.\r\n\r\n    -> First we highlight (by 'yellow') the current bars -> may be a single bar sometimes\r\n    -> Set the colors of the previous bars 'black' (if it is not a pivot element) -> but if it was a pivot element we check whether \r\n       the swapped indices are same or not -> If they are same we don't do anything, otherwise we change the color of the first index (non-pivot)\r\n    -> For the current two bars, we swap the heights and if it is a pivot we change its color to 'purple'\r\n\r\n    RANDOMIZED: To apply the 'Randomized Quick Sort' we only generate the pivot-index randomly for the range, and rest of the thungs remains same \r\n\r\n    HOW IS THE ANIMATION HANDLED? \r\n    When we perform the normal quick-sort we store all the pair of indices that are swapped, that gives us an way to access the bars \r\n    that are currently in use, so we highlight them. ANd also we store a bool value, that tells whether it was a pivot element or not. \r\n    If it was pivot that means it has got its final position, so we can mark this bar with a different color, and it should not get modified again.\r\n    The moment we are done swapping a pair (non-pivot), we change the colors to black again, because they are not yet in their final position\r\n\r\n    NOTE: Use console.log(swap_triplets) to see what are stored in 'swap_triplets' \r\n    */\r\n    handleQuickSort(isRandomized) {\r\n        const processedBars = \"#620037\";  // the pivots are basically colored with this color\r\n        const currentBar = \"yellow\";\r\n\r\n        let result = [];\r\n\r\n        // check whether we need to perform normal quick-sort, Or randomized one\r\n        if (isRandomized) result = randomizedQuickSort(this.state.arr);\r\n        else result = quickSort(this.state.arr);\r\n\r\n        const swap_triplets = result.swap_triplets;\r\n        const tmp_arr = result.arr; \r\n\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n        // console.log(swap_triplets);\r\n\r\n        this.setState({\r\n            isBusy: true\r\n        });\r\n\r\n        swap_triplets.map((triplet, index) => {\r\n            setTimeout(() => {\r\n                // set the two bars' color to 'yellow' that means we are wokring on them -> we can have one single bar also sometimes -> in that case only one bar gets highlighted\r\n                bars[triplet[0]].style.backgroundColor = currentBar;\r\n                bars[triplet[1]].style.backgroundColor = currentBar;\r\n\r\n                // change previous bars' colors to 'black' (except pivot)\r\n                if (index > 0) {\r\n                    if (!swap_triplets[index - 1][2]) {\r\n                        bars[swap_triplets[index - 1][0]].style.backgroundColor = this.state.barColor;\r\n                        bars[swap_triplets[index - 1][1]].style.backgroundColor = this.state.barColor;\r\n                    }\r\n                    else if (swap_triplets[index - 1][0] != swap_triplets[index - 1][1])\r\n                        bars[swap_triplets[index - 1][0]].style.backgroundColor = this.state.barColor;\r\n                }\r\n\r\n                // swap heights\r\n                const height0 = bars[triplet[0]].style.height;\r\n                bars[triplet[0]].style.height = bars[triplet[1]].style.height;\r\n                bars[triplet[1]].style.height = height0;\r\n\r\n                // if pivot, change color to 'purple' -> 2nd index is for the pivot -> triplet[1]\r\n                if (triplet[2]) {\r\n                    bars[triplet[1]].style.backgroundColor = processedBars;\r\n                }\r\n\r\n                // the moment when we reach the end, we update the states\r\n                if (index === swap_triplets.length - 1) {\r\n                    this.setState({\r\n                        arr: tmp_arr,\r\n                        isBusy: false\r\n                    });\r\n\r\n                    for (let bar of bars) {\r\n                        bar.style.backgroundColor = this.state.barColor;\r\n                    }\r\n                }\r\n            } , index * this.state.timePerBar);\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /*INSERTION SORT: We apply the normal isertion sort, in addition we store triplets each time that contains -\r\n    -> For the first bar, it contains {0,0,true}, that means - for the 0-th bar we color it with 'purple' and don;t make any other comparison (that we do in insertion sort)\r\n    -> The bar which is greater than the previous bar, we again mark it as 'true' as nothing will be swapped and store same indices ( as nothing is swapped )\r\n    -> Otherwise, when we perform swapping, we store all the indices that are swapped and also store 'false' as it has still possibility to get swapped\r\n    -> Finally when we come out of the while loop (when we get a valid position for the current element) we mark it as 'true' and store same indices (as no other swaps will be there for now)\r\n\r\n\r\n    HOW IS THE ANIMATION HANDLED?\r\n    Hence we store all the swapped indices along with their states (true/false) we get to know - how the coloring should be handled. \r\n    The coloring concept is alrready explained above!\r\n    */\r\n    handleInsertionSort() {\r\n\r\n        const highlight = \"#620037\";\r\n\r\n        const result = insertionSort(this.state.arr);\r\n        const triplets = result.triplets;\r\n        const tmp_arr = result.arr;\r\n\r\n        const bars = document.getElementsByClassName(\"bar\");\r\n\r\n        this.setState({\r\n            isBusy: true\r\n        });\r\n\r\n        triplets.map((triplet, index) => {\r\n            setTimeout(() => {\r\n                if (triplet[2]) {\r\n                    bars[triplet[0]].style.backgroundColor = highlight;\r\n                }\r\n                else { \r\n                    // swap the colors and heights\r\n                    const tmp_height = bars[triplet[1]].style.height;\r\n                    const tmp_bgColor = bars[triplet[1]].style.backgroundColor;\r\n                    bars[triplet[1]].style.height = bars[triplet[0]].style.height;\r\n                    bars[triplet[1]].style.backgroundColor = bars[triplet[0]].style.backgroundColor;\r\n\r\n                    bars[triplet[0]].style.height = tmp_height;\r\n                    bars[triplet[0]].style.backgroundColor = tmp_bgColor;\r\n                }\r\n\r\n                if (index === triplets.length - 1) {\r\n                    this.setState({\r\n                        arr: tmp_arr,\r\n                        isBusy: false\r\n                    });\r\n\r\n                    for (let bar of bars) {\r\n                        bar.style.backgroundColor = this.state.barColor;\r\n                    }\r\n                }\r\n            }\r\n            , index * this.state.timePerBar)\r\n        });\r\n    }\r\n\r\n\r\n\r\n    // RESET ARRAY WHEN COMPONENT IS RENDERED: This method is called during the Mounting phase of the React Life-cycle i.e after the component is rendered\r\n    componentDidMount() {  \r\n        this.resetArray();\r\n    }\r\n\r\n\r\n\r\n    // CREATE THE BARS WITH THE ARRAY: this is the method that heplps in rendering the bars\r\n    renderBars() {\r\n        const bar_seq = this.state.arr.map((value, idx) => {\r\n\r\n            return (\r\n                <div key={idx} >\r\n                    <div data-tip=\"\" data-for={\"tootip-\" + idx} className=\"bar \" style={\r\n                        {\r\n                            width: `${89 * 0.7 / this.state.arr.length}vw`,\r\n                            backgroundColor: this.state.barColor,\r\n                            marginLeft: `${89 * 0.3 / this.state.arr.length}vw`,\r\n                            height: `${value}px`,\r\n                            marginTop: \"10px\"\r\n\r\n                        }\r\n                    } ></div>\r\n                    <ReactTooltip className='myClass' id={\"tootip-\" + idx} effect=\"float\" border=\"true\" delayShow={100}>{this.state.isBusy ? \"wait\" : value} </ReactTooltip>\r\n                </div>\r\n            );\r\n        });\r\n\r\n\r\n\r\n        return (\r\n            <div className=\"col-12 col-md-11 border d-flex flex-wrap align-items-end justify-content-center\"\r\n                style={{\r\n                    \"background-image\": `linear-gradient(to bottom right, ${this.state.bgColor0}, ${this.state.bgColor1})`,\r\n                    height: `${this.state.max_val + 50}px`\r\n                }}>\r\n                {bar_seq}\r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n\r\n    // CHANGE SPEED: this methdo gets executed when the value of the speed is modified\r\n    onSpeedChange(value) {\r\n        const time = 400 / value;  // the lesser the 'value' will be, the more the time each bar will get\r\n        this.setState({\r\n            timePerBar: time\r\n        });\r\n    }\r\n\r\n\r\n    // CHANGE NUMBER OF BARS: this method gets executed when the number of bars is modified\r\n    onBarCountChange(value) {\r\n        this.state.len = value;\r\n        this.resetArray();\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* this is where we render the bar diagram */}\r\n                <div className=\"row bg-near-black justify-content-center\"> {/* 'row' provides some space before the bar diagram*/}\r\n                    <hr />\r\n                    {this.renderBars()}\r\n                </div>\r\n\r\n                {/* here we have the buttons and controllers together*/}\r\n                <div className=\"row d-flex justify-content-center align-items-center bg-navy\">\r\n                    {/* buttons and their descriptions*/}\r\n                    <div className=\"col-8 col-md-6 \" style={{fontFamily: \"jasmine\", fontStyle: \"bold\"}}>\r\n                        {/* we disable the buttons when the state is busy */}\r\n                        <Button data-tip={desc_reset} data-for=\"tip-reset\" id=\"btn-reset\" className=\"ma1 grow dib bw2 shadow-5\" color=\"primary\" disabled={this.state.isBusy} onClick={() => this.resetArray()}>Reset Array</Button>{' '}\r\n                        <Button data-tip={desc_mergeSort} data-for=\"tip-merge\" id=\"btn-mergeSort\" className=\"ma1 grow dib bw2 shadow-5\" color=\"success\" disabled={this.state.isBusy} onClick={() => this.handleMergeSort()}>Merge Sort</Button>{' '}\r\n                        <Button data-tip={desc_quickSort} data-for=\"tip-quick\" id=\"btn-quickSort\" className=\"ma1 grow dib bw2 shadow-5\" color=\"success\" disabled={this.state.isBusy} onClick={() => this.handleQuickSort(false)}>Quick Sort</Button>{' '}\r\n                        <Button data-tip={desc_randomQuickSort} data-for=\"tip-random-merge\" id=\"btn-randQuickSort\" className=\"ma1 grow dib bw2 shadow-5\" color=\"success\" disabled={this.state.isBusy} onClick={() => this.handleQuickSort(true)}>Randomized Quick Sort</Button>{' '}\r\n                        <Button data-tip={desc_insertSort} data-for=\"tip-insertion\" id=\"btn-insertSort\" className=\"ma1 grow dib bw2 shadow-5\" color=\"success\" disabled={this.state.isBusy} onClick={() => this.handleInsertionSort()}>Insertion Sort</Button>{' '}\r\n\r\n                        {/* here, the descriptions of each button is handled */}\r\n                        <ReactTooltip className='myClass' id=\"tip-reset\" effect=\"float\" border=\"true\" html={true} delayShow={200}>{desc_reset} </ReactTooltip>\r\n                        <ReactTooltip className='myClass' id=\"tip-merge\" effect=\"float\" border=\"true\" html={true} delayShow={200}>{desc_mergeSort}</ReactTooltip>\r\n                        <ReactTooltip className='myClass' id=\"tip-quick\" effect=\"float\" border=\"true\" html={true} delayShow={200}>{desc_quickSort}</ReactTooltip>\r\n                        <ReactTooltip className='myClass' id=\"tip-random-merge\" effect=\"float\" border=\"true\" html={true} delayShow={200}>{desc_randomQuickSort}</ReactTooltip>\r\n                        <ReactTooltip className='myClass' id=\"tip-insertion\" effect=\"float\" border=\"true\" html={true} delayShow={200}>{desc_insertSort}</ReactTooltip>\r\n                    </div>\r\n\r\n                    {/* here we have the controllers */}\r\n                    <div className=\"grow bg-aqua shadow b ba ma3 col-6 col-md-4 justify-content-center mt-3\">\r\n                        <p style={{fontFamily: \"jasmine\", fontStyle: \"bold\"}}>Speed </p>\r\n                        <Slider\r\n                            defaultValue={50}\r\n                            aria-labelledby=\"speed\"\r\n                            min={5}\r\n                            max={100}\r\n                            valueLabelDisplay=\"auto\"\r\n                            onChange={(event, value) => {\r\n                                this.onSpeedChange(value);\r\n                            }}\r\n                            disabled={this.state.isBusy}\r\n                        />\r\n                        \r\n                        <p style={{fontFamily: \"jasmine\", fontStyle: \"bold\"}}>Number of bars </p>\r\n                        <Slider\r\n                            defaultValue={100}\r\n                            aria-labelledby=\"Bars\"\r\n                            min={20}\r\n                            max={200}\r\n                            valueLabelDisplay=\"auto\"\r\n                            onChange={(event, value) => {\r\n                                this.onBarCountChange(value);\r\n                            }}\r\n                            disabled={this.state.isBusy}\r\n                        />\r\n                        <br /> <br />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SortInterface;","\r\nimport {React, Component} from 'react';\r\nimport Header from './header';\r\nimport Footer from './footer';\r\nimport  SortInterface from './sortingInterface';\r\nclass Main extends Component{\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Header/>\r\n                <SortInterface/>\r\n                <Footer/>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main;","import './App.css';\r\nimport Main from './components/main';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <Main/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import 'bootstrap/dist/css/bootstrap.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}